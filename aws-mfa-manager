#!/bin/bash

# This uses MFA devices to get temporary (eg 12 hour) credentials.  Requires
# a TTY for user input.
#
# GPL 2 or higher

cmd_setup() {
  if [ -n "$AWS_SESSION_TOKEN" ]
  then
    echo "Session token found.  This can not be used to generate a new token.
     unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
  and then ensure you have a profile with the normal access key credentials or
  set the variables to the normal keys.
  " >&2
    exit 1
  fi

  userarn=$(aws sts get-caller-identity --output text --query Arn)
  if [ -z "$userarn" ]
  then
    echo "Can not identify who you are.  The output of
    aws sts get-caller-identity --output text --query Arn
  did not return an ARN." >&2
    exit 1
  fi

  username=${userarn##*/}
  echo You are: $username >&2

  device=$(aws iam list-mfa-devices --user-name "$username" \
      --output text --query 'MFADevices[0].SerialNumber')
  if [ -z "$device" ]
  then
    echo "Can not find any MFA device for you.  The output of
    aws iam list-mfa-devices --user-name "$username" \
      --output text --query 'MFADevices[0].SerialNumber'
  did not return a serial number." >&2
    exit 1
  fi

  echo Your MFA device is: $device >&2

  echo -n "Enter your MFA code now: " >&2
  read code

  set -- --serial-number "$device" --token-code "$code" --output text
  if [ x${opt_duration:+set} = xset ] ; then
    set -- "$@" --duration-seconds "$opt_duration"
  fi
  tokens=$(aws sts get-session-token "$@")

  set -- $tokens
  access=$2
  expire=$3
  secret=$4
  session=$5

  if [ -z "$secret" -o -z "$session" -o -z "$access" ]
  then
    echo "Unable to get temporary credentials.  Could not find secret/access/session entries

  $tokens" >&2
    exit 1
  fi

  echo export AWS_SESSION_TOKEN=$session
  echo export AWS_SECRET_ACCESS_KEY=$secret
  echo export AWS_ACCESS_KEY_ID=$access

  echo Keys valid until $expire >&2
} # cmd_setup()

cmd_clear() {
  echo unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
}

show_usage() {
  cat <<END_OF_USAGE
Usage: ${0##*/} <COMMAND> [<OPTION>...]

Commands:
  clear                 Clear MFA credentials.
  setup                 Obtain MFA credentials.
  help | usage          Show usage information.

Options for the "setup" command:
  -d SECONDS | --duration SECONDS
                        Request that credentials remain valid for SECONDS
                        seconds.

END_OF_USAGE
}

exit_with_usage() {
  show_usage >&2
  exit $1
}

main() {
  if [ ! -t 0 ]
  then
    echo Must be on a tty >&2
    exit 1
  fi

  opt_command=$1
  shift

  case "$opt_command" in
    clear)
      if [ ${1+set} ] ; then
        echo "unrecognized option \"$1\" for command \"$opt_command\"" >&2
        exit_with_usage 1
      fi

      cmd_clear
      ;;

    setup)
      while [ $# -gt 0 ] ; do
        opt=$1
        shift
        case "$opt" in
        -d|--duration)
          opt_duration=$1
          shift
          if [[ ! "$opt_duration" =~ ^[0-9]+$ ]] ; then
            echo "duration \"$opt_duration\" is not an integer" >&2
            exit_with_usage 1
          fi
          ;;

        *)
          echo "unrecognized option \"$opt\" for command \"$opt_command\"" >&2
          exit_with_usage 1
          ;;
        esac
      done

      cmd_setup
      ;;

    help|--help|usage|--usage)
      if [ ${1+set} ] ; then
        echo "unrecognized option \"$1\" for command \"$opt_command\"" >&2
        exit_with_usage 1
      fi

      exit_with_usage 0
      ;;

    *)
      echo "unrecognized command \"$opt_command\"" >&2
      exit_with_usage 1
      ;;
  esac
}

main "$@"
